#+TITLE: pytest Fixtures

Here is a simple fixture that returns a number:

#+BEGIN_SRC python :tangle ch3/test_fixtures.py
import pytest

@pytest.fixture()
def some_data():
    """Return answer to ultimate question"""
    return 42

def test_some_data(some_data):
    """Use fixture return value in a test"""
    assert some_data == 42
#+END_SRC

* Sharing Fixtures Through conftest.py

To share fixtures among multiple test files, you need to use a conftest.py file somewhere centrally located for all of the tests.

The conftest.py file gets read by pytest and is considered a local plugin. It is not imported anywhere.

* Using Fixtures for Setup and Teardown

#+BEGIN_SRC python :tangle ch3/conftest.py
import pytest
import tasks
from tasks import Task

@pytest.fixture()
def tasks_db(tmpdir):
    """Connect to db before tests, disconnect after."""
    # setup: start db
    tasks.start_tasks_db(str(tmpdir), "tiny")

    yield # this is where the testing happens

    # teardown: stop db
    tasks.stop_tasks_db()

#+END_SRC

#+BEGIN_SRC python :tangle ch3/tests/func/add_test.py
import pytest
import tasks
from tasks import Task

def test_add_returns_valid_id(tasks_db):
    """tasks.add(<valid task>) should return an integer"""
    # GIVEN an initialized tasks db
    # WHEN a new task is added
    # THEN returned task_id is of type int
    new_task = Task("do something")
    task_id = tasks.add(new_task)
    assert isinstance(task_id, int)
#+END_SRC

You can view fixture execution with the --setup-show flag

#+BEGIN_SRC bash
pytest --setup-show test_add.py -k valid_id
#+END_SRC

* Using Fixtures for Test Data

Fixtures are a great place to store data to use for testing.

#+BEGIN_SRC python :tangle ch3/test_fixtures.py
@pytest.fixture()
def a_tuple():
    """Return something more interesting"""
    return (1, "foo", None, {"bar": 23})

def test_a_tuple(a_tuple):
    """Demo the a_tuple fixture."""
    assert a_tuple[3]["bar"] == 32
#+END_SRC

#+BEGIN_SRC python :tangle ch3/tasks_proj/conftest.py
@pytest.fixture()
def tasks_just_a_few():
    """All summaries and owners are unique"""
    return (
        Task("Write some code", "Brian", True),
        Task("Code review Brian's code", "Katie", False),
        Task("Fix what Brian did", "Michelle", False)
    )

@pytest.fixture()
def tasks_mult_per_owner():
    """Several owners with several tasks each."""
    return (
        Task("Write some code", "Brian", True),
        Task("Code review Brian's code", "Katie", False),
        Task("Fix what Brian did", "Michelle", False),
        Task("Write some more code", "Brian", True),
        Task("Code review Brian's new code", "Katie", False),
        Task("Fix what Brian did again", "Michelle", False),
        Task("Write some other code", "Brian", True),
        Task("Code review Brian's other code", "Katie", False),
        Task("Fix what Brian did once more", "Michelle", False)
    )
#+END_SRC

* Using Multiple Fixtures

We've seen that tmpdir uses tmpdir_factory. Let's add some specialized fixtures for non-empty tasks databases:

#+BEGIN_SRC python :tangle ch3/tasks_proj/conftest.py
@pytest.fixture()
def db_with_3_tasks(tasks_db, tasks_just_a_few):
    """Connected db with 3 tasks, all unique"""
    for t in tasks_just_a_few:
        tasks.add(t)

@pytest.fixture()
def db_with_multi_per_owner(tasks_db, tasks_mult_per_owner):
    """Connected db with 9 tasks, 3 owners, all with 3 tasks"""
    for t in tasks_mult_per_owner:
        tasks.add(t)
#+END_SRC

These fixtures all include two fixtures each in their parameter list: tasks_db and a dataset.
The dataset is used to add tasks to the database. Now tests can use these when you want the test to start from a non-empty database

#+BEGIN_SRC python
def test_add_increases_count(db_with_3_tasks):
    """Test tasks.add() affect on tasks.count()"""
    # GIVEN a db with 3 tasks
    # WHEN another task is added
    tasks.add(Task("Throw a party"))
    # THEN the count increases by 1
    assert tasks.count() == 4
#+END_SRC

* Specifying Fixture Scope

Fixtures include an optional parameter called scope, which controls how often a fixture gets set up and torn down.

** scope=

*** function
Run once per test function

*** class

Run once per test class

*** module

Run once per module

*** session

Run once per session

#+BEGIN_SRC python :tangle test_scope.py
"""Demo fixture scope"""
import pytest

@pytest.fixture(scope='function')
def func_scope():
    """a function scope fixture"""

@pytest.fixture(scope='module')
def mod_scope():
    """a function scope fixture"""

@pytest.fixture(scope='session')
def sess_scope():
    """a function scope fixture"""

@pytest.fixture(scope='class')
def class_scope():
    """a function scope fixture"""

def test_1(sess_scope, mod_scope, func_scope):
    """Test using session, module, and function scope fixtures."""

def test_2(sess_scope, mod_scope, func_scope):
    """Demo is more fun with multiple tests"""

class TestSomething():
    """demo class scope fixtures"""
    def test_3(self):
        """test using a class scope fixture"""

    def test_4(self):
        """again, multiple tests"""
#+END_SRC

* Changing Scope for Tasks Project Fixtures

#+BEGIN_SRC python :tangle tasks_proj.py
import pytest
import tasks
from tasks import Task

@pytest.fixture(scope='session')
def tasks_db_session(tmpdir_factory):
    """Connect to db before tests, disconnect after."""
    temp_dir = tmpdir_factory.mktemp('temp')
    # setup: start db
    tasks.start_tasks_db(str(tmpdir), "tiny")

    yield # this is where the testing happens

    # teardown: stop db
    tasks.stop_tasks_db()


@pytest.fixture()
def tasks_db(tasks_db_session):
    """An empty tasks db"""
    tasks.delete_all()

@pytest.fixture(scope='session')
def tasks_just_a_few():
    """All summaries and owners are unique"""
    return (
        Task("Write some code", "Brian", True),
        Task("Code review Brian's code", "Katie", False),
        Task("Fix what Brian did", "Michelle", False)
    )

@pytest.fixture(scope='session')
def tasks_mult_per_owner():
    """Several owners with several tasks each."""
    return (
        Task("Write some code", "Brian", True),
        Task("Code review Brian's code", "Katie", False),
        Task("Fix what Brian did", "Michelle", False),
        Task("Write some more code", "Brian", True),
        Task("Code review Brian's new code", "Katie", False),
        Task("Fix what Brian did again", "Michelle", False),
        Task("Write some other code", "Brian", True),
        Task("Code review Brian's other code", "Katie", False),
        Task("Fix what Brian did once more", "Michelle", False)
    )

#+END_SRC

* Specifying Fixtures with usefixtures

Instead of passing a fixture to a test, we can use a decorator to mark a test **or a class**

#+BEGIN_SRC python
@pytest.usefixtures('class_scope')
class TestSomething():
    """Demo class scope features"""
    def test_3(self):
        """test using a class scope feature"""

    def test_4(self):
        """multiple tests"""
#+END_SRC

The one difference between usefixtures and specifying a fixture name in the test method parameter list is that the test can use the return value of a fixture only if it's specified in the parameter list. A test using a fixture due to usefixtures cannot use the fixture's return value.

* Using autouse for Fixtures that Always Get Used

#+BEGIN_SRC python :tangle autouse.py
"""Demonstrate autouse fixtures"""
import pytest
import time


@pytest.fixture(autouse=True, scope='session')
def footer_session_scope():
    """Report the time at the end of a session"""
    yield
    now = time.time()
    print("---")
    print(f"Finished: {time.strftime('%d %b %X', time.localtime(now))}")
    print("---")


@pytest.fixture(autouse=True)
def footer_function_scope():
    """Report test durations after each function"""
    start = time.time()
    yield
    stop = time.time()
    delta = stop - start
    print("---")
    print(f"\nTest Duration: {delta:0.3}")
    print("---")

def test_1():
    """simulate long-ish running test"""
    time.sleep(1)

def test_2():
    """simulate slightly longer test"""
    time.sleep(1.23)
#+END_SRC

* Renaming Fixtures

The name of a fixture is usually the same as the function name of the fixture. Pytest allows you to rename fixtures with a name parameter to @pytest.fixture

#+BEGIN_SRC python :tangle test_rename_fixture.py
# demonstrate fixture renaming
import pytest

@pytest.fixture(name='lue')
def ultimate_answer_to_life_the_universe_and_everything():
    """returns the ultimate answer"""
    return 42

def test_everything(lue):
    """use the shorter name"""
    assert lue == 42
#+END_SRC

#+BEGIN_SRC bash
# run with setup showing
pytest --setup-show test_rename_fixture.py

# list all the fixtures available for the test
#+END_SRC

* Parametrizing Fixtures

#+BEGIN_SRC python :tangle test_add_variety2.py
import tasks
import pytest
from tasks import Task

tasks_to_try = (Task('sleep', done=True),
                Task('wake', 'brian'),
                Task('breathe', 'BRIAN', True),
                Task('exercise', 'BrIaN', False))

task_ids = ['Task({},{},{})'.format(t.summary, t.owner, t.done)
            for t in tasks_to_try]

def equivalent(t1, t2):
    """Check two tasks for equivalence"""
    return ((t1.summary == t2.summary) and
            (t1.owner == t2.owner) and
            (t1.done == t2.done))

# instead of parametrizing the test, we will parametrize a fixture called a_task
@pytest.fixture(params=tasks_to_try)
def a_task(request):
    """using no ids"""
    return request.param

def test_add_a(tasks_db, a_task):
    """Using a_task fixture (no ids)"""
    task_id = tasks.add(a_task)
    t_from_db = tasks.get(task_id)
    assert equivalent(t_from_db, a_task)

# we can also set the ids parameter to a function we write that provides the identifiers
def id_func(fixture_value):
    """A function for generating ids"""
    t = fixture_value
    return 'Task({}, {}, {})'.format(t.summary, t.owner, t.done)

@pytest.fixture(params=tasks_to_try, ids=id_func)
def c_task(request):
    """Using a function (id_func) to generate ids."""
    return request.param

def test_add_c(tasks_db, c_task):
    """Use fixture with generated ids."""
    task_id = tasks.add(c_task)
    t_from_db = tasks.get(task_id)
    assert equivalent(t_from_db, c_task)
#+END_SRC

* Parametrizing Fixtures in the Tasks Project

We would like to be able to test both TinyDB and MongoDB at once.

#+BEGIN_SRC python :tangle conftest.py
import pytest
import tasks
from tasks import Task

@pytest.fixture(scope='session', params=['tiny', 'mongo'])
def tasks_db_session(tmpdir_factory, request):
    """Connect to the DB before tests, disconnect after"""
    temp_dir = tmpdir_factory.mktemp('temp')
    tasks.start_tasks_db(str(temp_dir), request.param)
    yield
    tasks.stop_tasks_db()

@pytest.fixture()
def tasks_db(tasks_db_session):
    """An empty tasks db"""
    tasks.delete_all()
#+END_SRC

#+BEGIN_SRC python :tangle api.py
def start_tasks_db(db_path, db_type):  # type: (str, str) -> None
    """Connect API functions to a DB"""
    if not isinstance(db_path, string_types):
        raise TypeError('db_path must be a string')
    global _tasksdb
    if db_type == 'tiny':
        import tasks.tasksdb_tinydb
        tasksdb = tasks.tasksdb_tinydb.start_tasks_db(db_path)
    elif db_type == 'mongo':
        import tasks.tasksdb_pymongo.start_tasks_db(db_path)
    else:
        raise ValueError("db_type must be 'tiny' or 'mongo'")
#+END_SRC
